[
{
	"uri": "https://kryptosikkerhet.no/grunnleggende/introduksjon/",
	"title": "Introduksjon",
	"tags": [],
	"description": "",
	"content": " Hvorfor? Mange sier de ikke har noe skjule, og trenger derfor ikke å bry seg med informasjonssikkerhet. Dette er i beste fall naivt. Mange tror at de man skal skjule informasjon for er staten. Vi som bor i Norge har lite å frykte fra staten, men selv om dette kan endre seg i fremtiden er det i utgangspunktet kriminelle aktører og fremmede stater vi trenger å frykte. Forskere og ingeniører må forholde seg til trusselen om industrispionasje og journalister må verne om sine kilder.\nInformasjonssikkerhet handler like mye om å ikke føle seg overvåket, som det handler om skjule seg. Det handler om å beskytte dine data, for det er akkurat det de er: dine data.\nInformasjonssikkerhet Informasjonssikkerhet er et fellesbegrep for veldig mange ting. De aller fleste har et forhold til hva det betyr, selv om det å komme med en enkel definisjon er vanskelig. Kort sagt så er det tre hovedprisipper vi ønsker å oppnå med informasjonssikkerhet.\n Konfidensialitet Integritet Tilgjengelighet  Konfidensialitet Konfidensialitet går ut på å skjule vår data fra andre enn den tiltenkte mottakgeren, enten det er oss selv, eller andre. Dette gjøres som regel med kryptering. Det finnes utallige typer kryptering, og hver type har også utallige algoritmer, eller formler for å skjule informasjonen fra uvedkommede.\nIntegritet Integriteten til data er også viktig. Det å kunne stole på at en melding ikke har blitt endret med på veien, eller at ingen har tuklet med arkivet ditt over kontoutskrifter gir deg trygghet slik at du kan stole på informasjonen.\nTilgjengelighet Tilgjengelighet går ut på at din data er tilgjengelig for deg når du trenger den. Vi skal ikke snakke så mye om dette punktet i denne håndboken da det i hovedsak berører de som drifter it-systemer. Det du skal huske på er sikkerhetskopiering, alltid.\nKommunikasjonssikkerhet Det meste i denne håndboken omhandler kommunikasjonssikkerhet. Kommunikasjonssikkerhet kan man se på som et samlebegrep for konfidensialitet og integritet. Hvis vi skal kommunisere sikkert med noen er vi helt avhengig av begge disse to. Det finnes mangen måter å oppnå konfidensialitet og integritet på, og metodene varierer med hvilken form for kommunikasjon vi driver med. Jeg liker å dele inn informasjon inn i to grupper, siden måten vi praktiserer kommunikasjonssikkerhet er veldig forskjellig basert på hvilken type data vi snakker om.\n Hvilende data Data i transit  Data i transit Data i transit er kortlevd informasjon. Som for eksempel når du sender fødselsnummeret ditt til nettbanken din for å starte innloggingsprosessen. Data i transit er altså data som beveger seg fra en enhet til en annen. Mye av data i transit går over til hvilende data når den når sin destinasjon. De aller fleste kjenner igjen den grønne hengelåsen og informasjon om selskapet bak nettsiden i adressefeltet i nettleseren når vi besøker \u0026ldquo;sikre\u0026rdquo; nettsider.\nDenne hengelåsen forteller oss ingen ting om hvor sikkert et nettsted er. Det denne hengelåsen forteller oss er at informasjonen som sendes fra din nettleser til nettsiden er kryptert, og hvem som driver nettsiden. Dette gir oss konfindeisalitet og integritet på informasjonen i transit mellom nettleser og nettsiden. Den forteller ingen ting om hva som skjer med informasjonen på systemene til de som mottar den. Dersom denne informasjonen lagres på dette systemet liker jeg å se på den som hvilende data.\nData i transit bør sikres så godt man kan da denne informasjonen sendes over internett og passerer mange enhter. Disse enhetene eies av mange forskjellige firma og organisasjoner, og alle er utenfor din kontroll. Det betyr at man kan ikke vite hvordan disse behandler informasjonen dersom den ikke er kryptert. Ukryptert informasjon kan snappes opp og endres på veien. Man kan se på det som å sende et postkort i posten. Alle som jobber i posten i de forskjellige landene kortet passerer kan både lese det og endre innholdet uten at avsender eller mottaker merker det.\nHvilende data Det finnes mange typer hvilende data. All data som lagres er egentlig hvilende data. Grunnen til at jeg liker å skille disse to datatypene er at de systemene som beskytter data i transit ikke beskytter hvilende data. Det betyr at selv om nettbutikker har en kryptert forbindelse til din nettleser (grønn hengelås) betyr ikke det at kredittkortinformasjonen din lagres på en slik måte at den er beskyttet. Krypteringssystemet som beskyttet kredittkortnummeret ditt på veien til nettbutikken vil ikke lenger være til hjelp etter at det er kommet frem.\nHvilende data som er kryptert kan sendes fra en enhet til en annen uten at man trenger å benytte de systemene som skal beskytte data i transit.\nDenne guiden handler i stor grad om OpenPGP / GnuPG som et system for kryptering av hvilende data. OpenPGP brukes i stor grad til kryptering av epost, samt digital signering av programvare.\n"
},
{
	"uri": "https://kryptosikkerhet.no/openpgp/hva-er-openpgp/",
	"title": "Hva er OpenPGP",
	"tags": [],
	"description": "",
	"content": " OpenPGP er en standard som definerer formater for kryptering og signering av digitale meldinger og filer. OpenPGP benyttes i stor grad til kryptering av epost og kan installeres som et tilegg til flere epostklienter.\nOpenPGP benytter en krypteringsmetode som gjør at de partene som skal kommunisere ikke trenger å avtale krypteringnøkkel på forhånd. I steden benyttes mottakers offentlige nøkkel til å kryptere data med. Denne kan da bare dekrypteres dersom man ha den tilhørende private nøkkelen.\nSignering fungerer på motsatt måte. Avsender signerer med sin private nøkkel. Denne signaturen kan så valideres med den offentlige nøkkelen.\nFør du starter Jeg har en norsk epostliste du kan melde deg på dersom du ønsker å diskutere OpenPGP relaterte ting.\n Dersom du vil benytte OpenPGP til kryptering og signering av epost anbefaler jeg Email Self Defense Guiden til Free Software Foundation. Denne guider deg gjennom installasjon av GnuPG og Thunderbird med Enigmail, og hjelper deg sende din første kryptere epost. Det finnes også en enklere versjon av denne guiden i denne håndboken.\nInnholdet videre i denne guiden forklarer OpenPGP konspter bruken av GnuPG fra kommandolinjen. Bruk av kommandolinjeverktøy er ikke noe alle vil bruke i hverdagen, men til tross for at du kanske vil benytte et grafisk grensesnitt i for eksempel Thunderbird vil denne guiden være nyttig da den forklarer grunnleggende prinsipper med OpenPGP.\nKom i gang For å komme i gang med OpenPGP trenger du først og fremst selve OpenPGP programvaren. Det finnes et par alternativer men vi skal installere den vanligste Gnu Privacy Guard, forkortet GnuPG eller GPG.\nGnuPG finnes til de vanligste operativsystem og kan lastes ned fra GnuPG sine hjemmesider.\nGnuPG er et kommandolinjeverktøy. Det betyr at det i utgangspunktet ikke finnes noe grafisk grensesnitt og at det kjøres fra kommandolinjen. Det finnes heldigvis grafiske grensesnitt til en del epostklienter slik at bruken av GnuPG ikke kompliserer bruken av epost. For å gjøre det enklest mulig anbefaler jeg at du bruker Thunderbird med Enigmail til epost.\nI neste kapittel beskriver jeg hvordan du installerer GnuPG og deretter beskrives installasjon av Thunderbird og Enigmail.\n"
},
{
	"uri": "https://kryptosikkerhet.no/lisens/",
	"title": "Lisens",
	"tags": [],
	"description": "",
	"content": "\nDette verk er lisensieret under en Creative Commons Navngivelse-DelPåSammeVilkår 4.0 Internasjonal lisens.\n"
},
{
	"uri": "https://kryptosikkerhet.no/grunnleggende/passord/",
	"title": "Gode passord",
	"tags": [],
	"description": "",
	"content": " Et av de grunnleggende krav i all sikker kommunikasjon er valg av passord. Det finnes utallige tanker om hvordan man lager, husker, oppbevarer og bytter passord. De fleste konseptene er basert på antagelser og tradisjon, fremfor forskning og sunn fornuft.\n Rule 1 about passwords is \u0026ldquo;there are no rules!\u0026rdquo;\n Hvorfor er gode passord viktig? Gode passord er viktig av flere årsaker. Passordet er ofte det eneste som står mellom en angriper og full tilgang til din Facebook-konto, datamaskin eller epost. Det finnes avanserte dataprogramer som kan gjette seg frem til ditt passord basert på offentlig informasjon om deg, som for eksempel navn på samboer/ektefelle, barn kjæledyr osv. Det betyr at navnet på katten etterfulgt av fødselsåret til barna er typisk passord som enkelt kan gjettes.\nSå hva er et bra passord? Et godt passord er et passord som ikke enkelt kan gjettes basert på informasjon om deg som person. Det er også en fordel at du klarer å huske passordet ditt.\nMan kan diskutere om budskapet i stripen over er riktig eller ikke, men den er i alle tilfeller inne på noe. Gammeldagsepassord tips er, gammeldagse. Jeg skrev i starten at det ikke finnes noen regler om passord, men det finnes noen tips.\n Et passord skal være lett å huske, men vanskelig å gjette. Bruk gjerne setininger. Bruk aldri det samme passordet på tvers av internettjenester. Husk de passordene du trenger hver dag. Resten kan du skrive ned hjemme. Det finnes god software for lagring av passord. Bruk to-faktors autentisering der det er mulig (hvertfall på epost kontoen din).  Diceware I mange tilfeller brukes ordet passfrase brukes besvisst i steden for ordet passord. Meningen er å oppmuntre til bruk av setninger eller flere ord som passord.\n Diceware er en meteode for å generere passord ved bruk av terninger. Tanken er at man benytter en liste med numererte ord og et sett med vanlige terninger til å lage en passfrase bestående av flere tilfeldige ord fra ordlisten. Alle sifferne som blir brukt i nummereringen av ordene i ordlisten er mellom 1 og 6, slik at du kan bruke utfallet av terningene til å velge ord.\nDet finnes utallige ordlister, noen krever 5 terninger, andre krever 4. Antall ord i ordlisten sammen med antall ord i paafrasen vil avgjøre styrken til passordet.\nJeg har satt sammen en Norsk ordliste der vanskelige ord, og ord som ligner på hverandre er tatt ut.\n"
},
{
	"uri": "https://kryptosikkerhet.no/openpgp/installer/",
	"title": "Installere GnuPG",
	"tags": [],
	"description": "",
	"content": " GnuPG er en komplett, gratis og åpen kildekode implementasjon av OpenPGP standaren. GnuPG lar deg kryptere og signere dine data og meldinger. Du kan i tillegg administrere dine private og andres offentlige nøkler.\nGnuPG er et kommandolinje verktøy for enkel integrering mot andre applikasjoner. Det finnes grafiske grensesnitt for GnuPG, som for eksempel Enigmail som beskrives seinere i håndboken men de fleste eksempler som er beskrevet i håndboken viser bruk av GnuPG fra kommandolinjen.\nKonseptene og teorien bak er like både fra kommandolinjen og gjennom de forskjellige grafiske grensesnittene, så det anbefales at du leser gjennom eksemplene selv om du bruker et grafisk grensesnitt.\n Forskjellige versjoner GnuPG kommer i tre versjoner.\n Stable. Versjon 2.0. Den stabile versjonen av GnuGP. Støtter SSH autentisering og S/MIME. Modern. Versjon 2.1. Den mest moderne versjonen av GnuPG. Skal snart erstatte stable. Støtter ECC. Classic. Versjon 1.4. Gammel arkitektur. Anbefales ikke med mindre operativsystemet ikke støtter stable.  I de aller fleste tilfeller anbefaler jeg Stable.\nInstallere på Windows De forskjellige installasjonsfilene for Windows er tilgjengelig nederst på nedlastingssiden til GnuPG. Last ned Simple installer for GnuPG modern eller Gpg4win avhengig av hvilken versjon du ønker.\nIntegritetskontroll Før du installerer GnuPG må du kontrollere at ingen har modifisert programvaren du skal installere. Siden du ikke har GnuPG fra før er det beste vi kan gjøre å kontrollere sjekksummen til filen. Dette må vi gjøre fra kommandolinjen. For å gjøre det enklere kan du kopiere filen du akkurat lastet ned til C:\\Users\\DITTBRUKERNAVN\nFor å åpne kommandolinjen trykk WIN+R skriv inn cmd og trykk ENTER. Skriv inn følgende kommando, men bytt filnavn.exe med filnavnet til filen du akkurat lastet ned.\ncertUtil -hashfile filnavn.exe sha1  Dersom du lastet ned Gpg4win sammenligner du resultet med sjekksummen for filen du lastet ned med denne listen, lastet du ned GnuPG modern bruker du denne listen.\nStart installasjonsveiviseren For å installere OpenPGP dobbeltklikker du på filen du lastet ned. Dette starter installasjonsveiviseren.\nNår den er ferdig skal du kunne kjøre gpg kommandoen fra kommandolinjen.\nEksemplene i denne håndboken er tatt fra et Linux operativsystem. Alle eksemplene virker på Windows også, men må du erstatte gpg2 i eksemplene med gpg dersom du bruker Windows.\n For å kontrollere at alt har gått som det skal, kan du skrive følgende i kommandolinjen: gpg --version og trykke ENTER. For å åpne kommandolinjen trykker du WIN+R, skriv inn cmd og trykk ENTER. Det skal gi deg noe slikt som:\nC:\\\u0026gt;gpg --version gpg (GnuPG) 2.1.17 libgcrypt 1.7.5 Copyright (C) 2016 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;https://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: C:/Users/BRUKERNAVN/AppData/Roaming/gnupg Supported algorithms: Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 Compression: Uncompressed, ZIP, ZLIB, BZIP2  Legg merke til Home: C:/Users/BRUKERNAVN/AppData/Roaming/gnupg. Det er i denne mappen konfigurasjonsfiler og nøkler lagres. Den kan være forskjellig på din datamaskin. Vi kommer tilbake til denne mappen seinere i håndboken så det kan være greit å legge merke til denne.\nInstallere på Linux For å installere GnuPG stable søk etter GnuPG pakken i ditt pakkesystem. På Ubuntu for eksempel installeres det slik:\napt-get install gnupg2  GnuPG classic kommer som regel forhåndsinstallert, men kan eksistere sammen med GnuPG stable. GnuPG stable er tilgangelig som gpg2 fra terminalen. Jeg anbefaler ikke å bruke GnuPG classic selv om det er forhåndsinstallert på ditt system.\nFor å verifisere at GnuPG er installert som det skal kan du kjøre gpg2 --version.\namnesia@amnesia:~$ gpg2 --version gpg (GnuPG) 2.0.26 libgcrypt 1.6.3 Copyright (C) 2013 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;http://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: ~/.gnupg Supported algorithms: Pubkey: RSA, RSA, RSA, ELG, DSA Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 Hash: MD5, SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 Compression: Uncompressed, ZIP, ZLIB, BZIP2  "
},
{
	"uri": "https://kryptosikkerhet.no/openpgp/enigmail/",
	"title": "Kryptert epost med Enigmail",
	"tags": [],
	"description": "",
	"content": " Installer Thunderbird Thunderbird er en gratis åpen-kildekode epost klient utviklet av Mozilla, de samme som har utviklet Firebird. En epost klient som Thunderbird fungerer fint som en erstating for det nettleserbaserte grenesnittet til din eposttilbyder (Gmail eller lignende). Det første du må gjøre er å sette opp Thunderbird til å lese din e-post. Første gang du starter Thunderbird vil den veilede deg gjennom oppsettet av din epost.\nInstaller GnuPG Dersom du ikke har installert GnuPG enda følg veilednignen her.\nInstaller Enigmail Enigmail er en utvidelse til Thunderbird som gir deg et grensesnitt til GnuPG for automatisk å kryptere og signere epost. Denne utvidelsen kan installeres gjennom Utvidelses grensesnittet til Thunderbird.\nI Thunderbird velg Verktøy og så Utvidelser. Søk etter Enigmail i søkreruten øverst til høyre. Finn Enigmail i listen og velg installer. Følg anvisingene på skjermen og restart Thunderbird når du er ferdig.\nLag dine nøkler Før du kan sende og motta kryptert epost, og sende epost signert med din digitale signatur må du opprette et nøkkelpar. Første gang du starter Thunderbird etter at Enigmail er installert skal Oppsettsveilederen starte. Dersom den ikke gjør det kan du starte den ved å velge Enigmail og så Oppsettsveileder. Følg anvinsingen på skjermen så vil programet generere nøklene for deg. Før du lager dine nøkler anbefaler jeg at du leser Komme i gang med nøkler (du trenger ikke generere dine nøkler slik som beskrevet her) og Nøkkelpreferanser.\nNøkler du oppretter og importerer i Enigmail vil være tilgjengelig i GnuPG og omvendt.\n Publiser din offentlige nøkkel For at andre lettere skal kunne finne din offentlige nøkkel kan du laste den opp til en nøkkeltjener.\nFor å gjøre dette velg Thunderbird og så Nøkkelhåndtering. Høyreklikk på din nøkkel og velg Last opp offentlige nøkler til nøkkeltjener.\nImages are copyright © 2014-2016 Free Software Foundation, Inc.\n"
},
{
	"uri": "https://kryptosikkerhet.no/openpgp/nokler/",
	"title": "Dine nøkler",
	"tags": [],
	"description": "",
	"content": " Dine OpenPGP-nøkler er det du, eller de du kommuniserer med bruker som grunnalag i de kryptografiske funksjonene. I OpenPGP består dine nøkler av flere forskjellige nøkler som til sammen danner ditt nøkkelpar.\nEt OpenPGP nøkkelpar identifiseres med det som kalles et fingerprint eller fingeravtrykk. Et fingeravtrykk kan se slik ut: EAB9 F918 6C7F E39E EBA3 BAA8 D775 F425 69CD DB80 Bare ved å verifisere hele fingeravtrykket kan du være sikker på at det er riktig nøkkel.\nFingeravtrykket for din nøkkel vil være det samme uansett hvilke endringer du gjør med nøkkelen din.\nOffentlig nøkkel Din offentlige nøkkel er den delen av nøkkelen du skal dele med andre. Denne benyttes til å kryptere meldinger som skal sendes til deg, og til å verifisere meldinger du har signert med OpenPGP.\nMeldinger som er kryptert med din offentlige nøkkel kan bare dekrypteres med din private nøkkel.\n Privat nøkkel Din private nøkkel benyttes til å signere meldinger du sender, samt å dekryptere meldinger som er kryptert med din offentlige nøkkel. Det er mulig å ha flere undernøkler i ditt nøkkelpar, til forskjellig bruk eller til forskjellige enheter. De private nøklene kan ha flere funksjoner:\n Autorisering: Benyttes for å signere andre nøkler og brukeridentiteter for å bevise at de tilhører ditt nøkkelpar. Kryptering: Benyttes til å motte krypterte meldinger. Signering: Benyttes til å signere utgående meldinger for å bevise at de er sendt av eieren av en bestemt OpenPGP nøkkel. Autentisering: Benyttes til blandt annet autntisering av SSH.  Når du lager ditt nøkkelpar må du velge hvilken nøkkeltype din primære nøkkel skal ha. Din primære nøkkel vil alltid benyttes til autorisering av eventuelt andre nøkler og av brukeridentiter.\nGjør alt du kan for å holde din private nøkkel privat.\n Brukeridentiteter Brukeridentiteter er det som tilegner et navn og en epostadresse til din nøkkel. Et nøkkelpar kan ha så mange brukeridentiteter man vil, men en av de vil være primær og vil bli brukt for å gi navn til nøkkelen i OpenPGP verktøyene. En brukeridentitet består av Navn (kommentar) \u0026lt;epost\u0026gt;. Kommentar og epost er i utgangspunktet frivillig.\nGenerer dine egne nøkler For å generere dine nøkler starter du GnuPG med --gen-key parameteren. Hvilken nøkkel du skal generere, og hvilke alternativer du skal velger er avhengig av bruken.\namnesia@amnesia:~$ gpg2 --gen-key gpg (GnuPG) 2.0.30; Copyright (C) 2015 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) Your selection?  Du får da velg om hvilken nøkkel du ønsker. I utgangspunktet er valg 1 greit.\nYour selection? 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (2048)  Deretter må du velge nøkkellengde. Standardvalget på 2848 er i de fleste tilfeller fornuftig, selv om større egentlig er bedre.\nGnuPG støtter RSA nøkler opp til 4096 bits men anbefalingen er RSA 2048. Grunnen til det er at RSA-4096 gir minimalt bedre sikkerhet enn RSA-2048 mens ytelsen reduseres drastisk med RSA-4096. Hvis du ikke føler at RSA-2048 er godt nok anbefales eliptisk-kurve-algoritmer. Se foreøvrig GnuPG.org sin FAQ.\n What keysize do you want? (2048) 2048 Requested keysize is 2048 bits Please specify how long the key should be valid. 0 = key does not expire \u0026lt;n\u0026gt; = key expires in n days \u0026lt;n\u0026gt;w = key expires in n weeks \u0026lt;n\u0026gt;m = key expires in n months \u0026lt;n\u0026gt;y = key expires in n years Key is valid for? (0)  Neste steg er gyldighetsperioden til nøkkelen. Denne kan du endre når som helst, også etter at den er gått ut. Derfor anbefaler jeg at du setter denne til et år, slik at dersom du mister tilgangen til nøkkelen og må lage en ny så går den gamle ut på et eller annet tidspunkt.\nKey is valid for? (0) 1y Key expires at 12/29/17 19:06:04 W. Europe Standard Time Is this correct? (y/N) y GnuPG needs to construct a user ID to identify your key. Real name:  Nå skal du lage nøkkelparets første brukeridentitet. Det er dette som vises når andre laster inn ditt nøkkelpar. Skriv inn ditt navn og epostadresse.\nReal name: Simba Larki Email address: simba@exaple.com Comment: You selected this USER-ID: \u0026quot;Simba Larki \u0026lt;simba@exaple.com\u0026gt;\u0026quot; Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o You need a Passphrase to protect your secret key.  Siste steget er å valge et passord, eller passfrase. Velg et skikkelig passord, eller en setning. Det er dette som hindrer at andre får tilgang til din private nøkkel dersom de får tilgang til datmaskinen eller filene dine.\nWe need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. gpg: key 86D91256 marked as ultimately trusted public and secret key created and signed. pub 2048R/86D91256 2016-12-29 [expires: 2017-12-29] Key fingerprint = A0EF C173 8E8E 8772 25AC AAFD 3E7C 7812 86D9 1256 uid [ultimate] Simba Larki \u0026lt;simba@example.org\u0026gt; sub 2048R/27FA711C 2016-12-29 [expires: 2017-12-29]  Du kan nå se at nøkkelen med fingeravtrykket A0EF C173 8E8E 8772 25AC AAFD 3E7C 7812 86D9 1256 og nøkkelid 0x86D91256 er opprettet.\nNøkkelid består av de 8 (kort nøkkelid) eller 16 (lang nøkkelid) siste tegnene i fingeravtrykket med 0x rett forran.\n Du kan se dine nøkkelpar med kommandoen amnesia@amnesia:~$ gpg2 -K --fingerprint\nTilbakekallingssertifikat Et tilbakekallingssertifikat benyttes dersom du ikke lenger har kontroll over din private nøkkel. Dette kan brukes uten at du har tilgang til den private nøkkelen. Dersom du tilbakekaller nøkkelen din vil den ikke lenger kunne brukes til å signere eller kryptere meldinger.\namnesia@amnesia:~$ gpg2 --output revoke.asc --gen-revoke simba@example.org  Dette vil lagre ditt tilbakekallingssertifikat som revoke.asc. Ta godt vare på dette. Dersom andre får tilgang til det kan de tilbakekalle dit nøkkelpar.\n"
},
{
	"uri": "https://kryptosikkerhet.no/grunnleggende/kryptering/",
	"title": "Kryptering",
	"tags": [],
	"description": "",
	"content": " Symmetrisk kryptering En symmetrisk krypteringsalgoritme benytter samme nøkkel både til kryptering og dekryptering. To parter som kommuniserer med symmetrisk kryptering må bli enige om nøkkelen på forhånd. Så snart de er enige krypterer senderen en melding med nøkkelen og sender den til mottakeren. Mottakeren dekrypterer meldingen med den samme nøkkelen. For eksempel brukte den Tyske Enigma maskien symmetrisk algoritme, og nøklene ble distribuert som kodebøker. Hver dag ville en radiooperatør som sendte eller mottok meldinger slå opp i kodeboken for å finne dagens nøkkel. Moderne eksempler på symmetriske krypteringsalgoritmer er 3DES, Blowfish og IDEA.\nEn god krypteringsalgoritme legger all sikkerheten i nøklene og ingen i selve algoritmen. Med andre ord skal det ikke være til hjelp for en angriper å vite hvilken algoritme som benyttes. Bare hvis han vet nøkkelen er behovet for å vite aloritmen viktig. Algoritmene som benyttes i OpenPGP har denne egenskapen.\nSiden all sikkerheten er i nøkkelen er det svært viktig at det er veldig vanskelig å gjette nøkkelen. Med andre ord må antall mulige nøkler være mange. På engelsk kalles antall mulig nøkler key space.\nBritene brukte maskiner til å gjette nøkler under 2. verdenskrig. Den Tyske Enigma maskinen hadde mange mulige nøkler, men britene bygget spesialiserte maskiner som gjettet seg frem til dagen nøkkel ved å prøve alle muligheter. Det betyr at noen dager fant de dagens nøkkel etter få timer mens andre dager fant de aldri riktig nøkkel.\nDagens datamaskiner kan gjette nøkler utrolig hurtig, og det er derfor nøkkellengde er viktig i moderne kryptosystemer. Krypteringsalgoritmen DES bruker en 56-bit nøkkel, som betyr at det er 256 mulige nøkler. 256 er 72 057 594 037 927 936 nøkler. Dette er veldig mange nøkler, men en vanlig datamaskin kan prøve alle mulige nøkler i løpet av noen dager. En spesielisert datamaskin kan prøve de i løpet av timer. På en annen side nye algoritmer slik som 3DES, Blowfish og IDEA bruker 128-bit nøkler som betyr at det er 2128 mulige nøkler. Dette er mange, mange, mange fler nøkler og selv om alle datamaskinene på planeten sammarbeidet ville de aldri klart å gjette seg frem til riktig nøkkel.\nOffentlig-nøkkel kryptering Hovedproblemet med symmertrisk kryptering er ikke sikkerheten men utvekslingen av nøkler. Når sender og mottaker har utvekslet nøkler, så kan denne nøkkelen benyttes til å kommunisere sikkert. Men hvilken sikker kommunikasjonskanal ble benyttet for å utveksle nøkkelen. I virkeligeten vil det nok ofte være lettere for en angriper å snappe opp nøkkelen i steden for å gjette seg frem til riktig nøkkel.\nOffentlig-nøkkel kryptering ble funnet opp for å unngå hele nøkkelutvekslings-problemet. Offentlig-nøkkel kryptering benytter et par med nøkler for å sende meldinger. Begge nøklene tilhører personen som mottar meldingen. En nøkkel er den offentlige nøkkelen og kan deles med hvem som helst. Den andre nøkkelen er en privat nøkkel og holdes hemmelig av eieren. En sender krypterer en melding med den offentlige nøkkelen og når den er kryptert kan den bare dekrypteres med den private nøkkelen.\nDenne protokollen løser problemet med utveksling av nøkler som eksisterer med symmetrisk kryptering. Det er ikke behov for sender og mottaker å bli enige om en nøkkel på forhånd. Det eneste som kreves er at senderen av meldingen får den offentlige nøkkelen til mottakeren på et tidspunkt før de skal kommunisere. I tillegg kan den ene offentlige nøkkelen benyttes av alle som ønsker å kommunisere med eieren.\nOffentlig-nøkkel kryptering baserer seg på enveis falldør-funksjoner. En enveisfunksjon er en funksjon som er lett å regne ut men vanskelig å reversere. For eksempel er det lett å gange to primtall for å få et kompositt tall, men det er vanskelig å faktorisere et kompositt-tall til sine primtallkomponenter. En enveis falldør funksjon er lik, men den har en falldør. Det betyr at dersom en del av infomasjonen er kjent så blir det lett å reversere funksjonen. For eksempe dersom du har et tall som er faktoren av to primtall, så vil det å vite det ene primtallet gjøre det lett å regne seg frem til det andre. Gitt att offentlig-nøkkel kryptering baserer seg på primfaktorisering, den offentlige nøkkelen består av et kompositt-tall som er faktoren av to primtall og krypteringsalgoritmen bruker dette tallet for å kryptere meldingen. Algoritmen for å dekryptere meldingen krever at du vet begge primtallene så det å dekryptere er enkelt hvis du har den private nøkkelen som inneholder ett av primtallene men veldig vanskelig dersom du ikke har den.\nSom med gode symmetriske algoritmer så ligger all sikkerheten til offentlig-nøkkel algoritmer i nøkkelen. Derfor er nøkkelelngde en måleenhet for systemets sikkerhet. Men du kan ikke sammenligne størrelsen på nøkkelene til en symmetrisk algoritme og en offentlig-nøkkel algoritme for å sammenligne sikkerheten til de to algoritmene. I et brute-force angrep på en symmetrisk algoritme med en nøkkellengde på 80 bit, må angriperen forsøke opp til 280 nøkler for å finne den riktige nøkkelen. I et brute-force angrep på en offentlig-nøkkel algoritme med en nøkkelstørrelse på 512 bit må angriperen faktorisere et kompositt-tall kodet i 512 bit (opp til 155 desimaltall). Arbeidsmengen til en angriper er fundamentalt anderledes avhengig av hvilken type algoritme han angriper. Mens 256 bit er tilstrekkelig for symmetrisk algoritmer, gitt dagens faktoriserings-teknologi offenlitge nøkler med 2048 bits er anbefalt for de fleste tilfeller.\nHybride-systemer Offentlig-nøkkel algoritmer er ingen perfekt løsning. Menage symmetriske algoritmer er sterkere fra et sikkerhetsstandpunkt., og offentlig-nøkkel kryptering og dekryptering er mer krevende enn de tilsvarende operasjonene i en symmetrisk algoritme. Offentlig-nøkkel algoritmer er derimot et effektivt verktøy for å distribuere symmetriske krypteringsnøkler, og det er slik de benyttes i hybride systemer.\nEt hybrid-system benytter både en symmetrisk algoritme og en offentlig-nøkkel algoritme. Det virker slik at det benytter en offentlig-nøkkel algoritme for å utveksle en nøkkel som brukes for den symmetriske algoritmen. Den faktiske maldingen er kryptert med en symmetrisk algoritme før den sendes til mottakeren. Siden utveksling av den symmetriske nøkkelen er sikker, er denne nøkkelen forskjellige for hver melding som sendes. Derfor kalles den ofte sesjonsnøkkel.\nOpenPGP benytter hybride-systemer. Sesjonsnøkkelen, kryptert med den offentlige- nøkkelen og meldingen som sendes, kryptert med sesjonsnøkkelen er automatisk kobinert i en pakke. Mottakeren benytter sin private nøkkel for å dekryptere sesjonsnøkkelen som deretter benyttes for å dekryptere selve meldingen.\nEt hybrid-system er ikke sikere enn den svakeste algoritmen som benyttes. I OpenPGP er muligens offentlig-nøkkel algoritmen den svakeste av de to. Heldigvis, hvis en angriper klarer å dekryptere en sesjonsnøkkel vil den bare klare å dekryptere en melding. Angriperen må så starte på nytt og dekryptere en sesjonsnøkkel til for å klare å lese en annen melding.\nDigitale signaturer En sjekksum er en kort kode som brukes til å sjekke integriteten av data, eller den matematiske funksjonen av dataene, algoritmen, som genererer koden, ofte kalt hash-funksjon.\nEt dokuments digitale signatur er resultatet av en hash-funksjon av dokumentet. For å være nytteig må en hash-funksjon ha to viktige egenskaper. For det første bør det være vanskelig å finne to dokumenter som resulterer i samme sjekksum. I tillegg bør det være vanskelig å gjennopprette det originale dokumentet ut fra en sjekksum.\nVed å bruke en slik hash-funksjon et dokument kan signeres ved å produsere en sjeksum, og denne er signaturen. En annen person kan sjekke signaturen ved å kjøre dokumentet gjennom samme hash-funksjon og sammenligne sin sjekksum men den som kom som signatur. Dersom de er like, er det nestne helt sikkert at dokumentene er identiske.\nProblemet er å benytte en hahs-funksjon uten å tillate at en angiper interferer med signatur-kontrollen. Hvis dokumentet og signaturen er sendt ukryptert, så kan en angriper modifere dokumentet og generere en ny signatur uten at mottaker merker det. Dersom bare dokumentet er kryptert en angriper kan endre på signaturen og gjøre slik at kontrollen av signaturen feiler.\nEn algiritme som virker er å benytte en offentlig-nøkkel algoritme får å kryptere signaturen. Faktisk så krypteres sjekksummen med den private nøkkelen til personen som signerer, og hvem som helst kan kontrollere signaturen ved å benytte den offentlige signaturen. Det signerte dokumentet kan senes ved å benytte hvilken som helst annen krypteringsalgoritme, eller det kan sendes ukryptert. Hvis dokumentet modifiseres vil signaturkontrollen feile. The Digital Signature Standard (DSA) er en offentlig-nøkkel algoritme som virker som akkurat beskrevet. DSA er en del av OpenPGP standaren, men RSA kan også benyttes til digitale signaturer.\nEliptiske kurver Eliptiske kurver skal løse samme utfordring som tradisjonelle offentlig-nøkkel algoritmer. Nemmelig å lage en ennveis falldør-funksjon. Problemet med tradisjonelle offentlig-nøkkel algoritmer er at forholdet mellom nøkkelstørrelse og sikkerhet ikke er lineært. Det betyr at en dobling i nøkkelstørrelse ikke gir en dobling av sikkerheten, men tiden det tar for å kryptere / dekryptere i beste fall dobles. Det betyr at på et eller annet tidspunkt må vi gå over til en annen type falldør-funksjon.\nEliptiske kurver er spesielle kurver som kan gjennkjennes på sin symmetriske utforming. Under er et eksempel på noen kurver. Kurvene som benyttes i kryptering er mye mer komplekse, men disse eksemplene gjør det lett å se for seg hvordan det virker.\nEksempel på eliptiske kurver fra Wikipedia.\nEliptiske kurver har den egenskapen at dersom du trekker en ikke horisontal linje fra et punkt A på kurven til et annet B gjennom punkt C. Så vil C invertert være A + B. Denne egenskapen er det vi benytter i eliptisk krurve kryptografi.\nMeget forenklet kan det forklares slik: Vår private nøkkel er et tilfeldig valgt tall n som vi ganger opp med et forhåndsbestemt punkt på kurven, G for å få et annet punkt på kurven. Dette er vår offentlige nøkkel K. *K = n * G*. Dette er et eneklt regnestykke, men dersom du vet K og G og vil komme frem til n, så er dette meget komplisert.\nVed å benytte eliptiske kurver i kryptografi kan man redusere nøkkellengden betraktelig i forhold til tradisjonell kryptering. Det sies at en 256 bit ECC nøkkel skal gi samme sikkerhet som en 3072 bit RSA nøkkel.\n"
},
{
	"uri": "https://kryptosikkerhet.no/openpgp/noekkelring/",
	"title": "Din nøkkelring",
	"tags": [],
	"description": "",
	"content": " Din nøkkelring er et begrep som brukes om de offentlige og private nøklene du har en kopi av på din datamaskin. Din nøkkelring inneholder ikke bare dine egne offentlige og private nøkler, men også de offentlige nøklene de du kommuniserer med. I tillegg til selve nøklene finnes det også annen informasjon i den, som for eksmepel hvilke nøkler du har tillit til. Du bør derfor jevnlig ta sikkerhetskopi av nøkkelringen. Denne bør du lagre på et trygt sted.\nHvilke nøkler skal jeg lagre i min nøkkelring? For det første må du ha din egen private nøekkel, og din offentlige nøkkel i nøkkelringen din. Disse trenger du for å kunne signere og dekryptere meldinger. I tillegg til dine egne nøkler må du ha de offentlige nøklene til de du kommuniserer med. Enten for å verifisere signaturer, eller for å kryptere meldinger.\nFør du sender en kryptert melding må du være sikker på at den offentlige nøkkelen du bruker for å kryptere meldingen faktisk tilhører den personen du skal sende meldingen til. Hvem som helst kan lage et nøkkelpar og skrive hvilket navn og hvilken epostadresse de vil. Det er derfor essensielt at du verifiser fingeravtrykket til den offentlige nøkkelen før du bruker den. Det er flere måter å gjøre dette på, for eksempel SMS eller over telefon.\nFor å gjøre det hele litt lettere kan man sertifisere og sette tillit til nøkler. På denne måten bygger man seg et tillitsnett rundt nøklene. Dersom en nøkkel er sertifiert av en annen nøkkel du har tillit ti vil OpenPGP automatisk ha tillit til nøkkelen basert på sertifiseringen. Tillitsnettet (Web Of Trust) forsøker å skape et nettverk av nøkler du stoler på slik at man lettere kan knytte et nøkkelpar til en person.\nFor å holde styr på alle offentlige nøkler og sertifiseringer bruker OpenPGP noe som kalles nøkkeltjenere. Du kan se på den som en digital telefonkatalog med offentlige nøkler. Det finnes mange nøkkelservere, og de fleste sammarbeider om å holde seg oppdatert. Jeg anbefaler at du bruker hkps://hkps.pool.sks-keyservers.net som nøkkelserver. Dette er ikke en enkelt nøkkelserver men en samling av oppdaterte servere.\nDet er svært viktig at du regelmessig oppdaterer de offentlige nøklene til de du kommuniserer med fra nøkkeltjenere. Dette er eneste måte å vite at nøkkelen for eksempel ikke er tilbakekalt. På samme måte er det viktig at du laster opp endringer i din offentlige nøkkel dersom du gjør endringer som:\n Endret utløpsdato Tilbakekalt nøkkel Ny brukeridentitet  Tilstedeværelsen av en nøkkel på en nøkkelserver sier ikke noe om gyldigheten eller tilliten til en nøkkel. Husk å alltid verifiser hele fingeravtrykket til en nøkkel før du bruker den.\n Sertifisering Når du sertifiserer en nøkkel forteller du omverden at du har verifisert sammenhengen mellom navn og epostadresse spesifisert i nøkkelen og den faktiske eieren av nøkkelen.\nEn sertifisering sier ikke noe om du kan stole på personen som eier nøkkelen eller ikke. Det eneste en sertifisering sier er at sammenhengen mellom den offentlige nøkkelen og brukeridentiteten er bekreftet.\nNår du sertifiserer en offentlig nøkkel signerer du denne med din private nøkkel. Du kan velge å lage en lokal signatur, denne vil lagres lokalt i din nøkkelring og kan ikke lastes opp til nøkkelservere. Det vanligste derimot er å sertifisere nøkler for så å laste opp sertifiseringen til nøkkelserverene.\nTillit Når man snakker om tillit til en nøkkel mener man hvor mye man stoler på at eieren til nøkkelen verifiserer at eieren til nøklene han/hun sertifiserer er den han/hun utgir seg for å være. Dersom du har tillit til Bob sin nøkkel, og Bob har sertifisert Alice sin nøkkel vil du automatisk også ha tillit til Alice sin nøkkel. Hvilke nøkler du har tillit til lagres bare lokalt i din nøkkelring. Ingen andre kan se hvem du har tillit til, og du kan ikke se hvem som har tillit til din nøkkel.\nImportere nøkler Det letteste når du skal importere offentlige nøkler er å søke på en nøkkelserver. For å søke etter en offentlig nøkkel på en nøkkelserver bruker du --search-keys.\nFør du kan ta i bruk nøkkelserver må du spesifisere dette i gpg.conf. Denne filen finner du i C:\\Users\\BRUKERNAVN\\AppData\\Roaming\\gnupg i Windows eller ~\\.gnupg på Linux. Åpne denne filen i en valgfri teksteditor (Notepad for eksmepel) og legg inn følgende linje.\nkeyserver hkps://pool.sks-keyservers.net  pool.sks-keyservers.net er et nettverk av nøkkelservere som synkroniserer seg selv i mellom. Dette gir høy tilgjengelighet av nøkler, og er derfor anbefalt.\namnesia@amnesia:~$ gpg2 --search-keys alice@cyb.org gpg: searching for \u0026quot;alice@cyb.org\u0026quot; from hkps server pool.sks-keyservers.net (1) Alice (Rechtsanwältin) \u0026lt;alice@cyb.org\u0026gt; 1024 bit DSA key FB5797A9, created: 2000-06-06 Keys 1-1 of 1 for \u0026quot;alice@cyb.org\u0026quot;. Enter number(s), N)ext, or Q)uit \u0026gt;  Velg så nøkkelen du vil importere. Husk å å verfiser hele fingeravtrykket sammen med eieren til nøkkelen før du tar den i bruk.\nKeys 1-1 of 1 for \u0026quot;alice@cyb.org\u0026quot;. Enter number(s), N)ext, or Q)uit \u0026gt; 1 gpg: requesting key FB5797A9 from hkps server pool.sks-keyservers.net gpg: key FB5797A9: public key \u0026quot;Alice (Rechtsanwältin) \u0026lt;alice@cyb.org\u0026gt;\u0026quot; imported gpg: Total number processed: 1 gpg: imported: 1  Du kan nå se at den nye offentlige nøkkelen er kommet inn i din nøkkelring sammen med ditt eget nøkkelpar når du bruker -k --fingerprint kommandoen.\namnesia@amnesia:~$ gpg2 -k --fingerprint pub 2048R/86D91256 2016-12-29 [expires: 2017-12-29] Key fingerprint = A0EF C173 8E8E 8772 25AC AAFD 3E7C 7812 86D9 1256 uid [ultimate] Simba Larki \u0026lt;simba@example.org\u0026gt; sub 2048R/27FA711C 2016-12-29 [expires: 2017-12-29] pub 1024D/FB5797A9 2000-06-06 Key fingerprint = 738C 2FE2 AF16 B223 B2CC 4CED 5B2A 0A6D FB57 97A9 uid [ unknown] Alice (Rechtsanwältin) \u0026lt;alice@cyb.org\u0026gt; sub 1024g/C8B3998F 2000-06-06  Dersom du har mottat en offentlig nøkkel i for eksmepel et vedlegg til en epost kan du importere den med --import paramteren.\namnesia@amnesia:~$ gpg2 --import -i key.asc  Når nøklene er i din nøkkelring kan du benytte de til å kryptere meldinger og verifisere signaturer.\nEksportere nøkler For at andre skal kunne kryptere meldinger til deg eller verifisere dine digitale signaturer er de avhengig å importert din offentlige nøkkel føsr.\nFor å eksportere din offentlige nøkkel til en fil som du for eksempel kan legge ved epost bruker du --export paramteren.\namnesia@amnesia:~$ gpg2 -a --export alice@cyb.org -o key.asc -----BEGIN PGP PUBLIC KEY BLOCK----- Version: GnuPG v2 mQENBFgM8S4BCACsRH [...] w49DLEkc =h9GD -----END PGP PUBLIC KEY BLOCK-----  Laste opp nøkler til nøkkeltjenere Du kan også laste opp nøkkelen din til en nøkkelserver slik at andre kan søke den opp og laste den ned der. Dersom du har sertifisert en annen offentlig nøkkel kan du også laste opp denne sertifiseringen. Da bruker du nøkkelid til den offentlige nøkkelen du sertifiserte.\namnesia@amnesia:~$ gpg2 --send-keys 0x69CDDB86 gpg: sending key 69CDDB86 to hkps server pool.sks-keyservers.net  Når du kommuniserer med nøkkelservere må du benytte nøkkelid. For eksempel 0x69CDDB86.\n Sette tillit til nøkler Når man snakker om tillit til en nøkkel mener man hvor mye man stoler på at eieren til nøkkelen verifiserer at eieren til en nøkkel er den han/hun utgir seg for å være. Dersom du har tillit til Bob sin nøkkel, og Bob har sertifisert Alice sin nøkkel vil du automatisk også ha tillit til Alice sin nøkkel.\nDu setter tillit til en nøkkel med --edit-key parameteren.\namnesia@amnesia:~$ gpg2 --edit-key alice@cyb.org gpg (GnuPG) 2.0.30; Copyright (C) 2015 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. pub 1024D/FB5797A9 created: 2000-06-06 expires: never usage: SCA trust: unknown validity: unknown sub 1024g/C8B3998F created: 2000-06-06 expires: never usage: E [ unknown] (1). Alice (Rechtsanwältin) \u0026lt;alice@cyb.org\u0026gt; gpg\u0026gt;  Du blir nå vist hvilken nøkkel du skal endre. For å sette tillit bruker vi trust kommandoen.\ngpg\u0026gt; trust pub 1024D/FB5797A9 created: 2000-06-06 expires: never usage: SCA trust: unknown validity: unknown sub 1024g/C8B3998F created: 2000-06-06 expires: never usage: E [ unknown] (1). Alice (Rechtsanwältin) \u0026lt;alice@cyb.org\u0026gt; Please decide how far you trust this user to correctly verify other users' keys (by looking at passports, checking fingerprints from different sources, etc.) 1 = I don't know or won't say 2 = I do NOT trust 3 = I trust marginally 4 = I trust fully 5 = I trust ultimately m = back to the main menu Your decision?  Spesifiser hvor god tillit du har til eieren av denne nøkkelen.\ngpg\u0026gt; save  For å lagre endringene bruker vi save kommandoen.\nSertifisere nøkler Sertifisering (eller signering) gjør man når man har verifisert sammenhengen mellom nøkkel og person. Når man sertifiserer en nøkkel signerer du den med din private nøkkel, slik at andre ser at du går god for denne nøkkelen.\nFor å signere nøkler gjør du samme som over, men i steden for trust bruker du sign kommandoen.\nBare signer nøkler der du har verifisert sammenhengen mellom nøkkelen og personen. Verifiser alltid hele fingeravtrykket til en nøkkel før du signerer den.\n Når du har signert en nøkkel kan du laste opp din signatur til nøkkelserverene slik at andre kan se at du har verifisert nøkkelen og identiten til eieren.\namnesia@amnesia:~$ gpg2 -send-keys 0xFB5797A9 gpg: sending key FB5797A9 to hkps server keys.drup.no  Oppdatere offentlige nøkler Nøkler kan tilbakekalles eller signeres av andre brukere uten at du nødvendigvis får vite det. Slike endringer er viktig at du får med deg. Derfor bør du synkronisere din nøkkelring mot nøkkelservere reglemessig. Dette gjøres med --refresh-keys\namnesia@amnesia:~$ gpg2 --refresh-keys  Endre passfrase på din private nøkkel Din private nøkkel bør være beskyttet med en god passfrase. Enten du vil endre passfrase, eller sette et for første gang er fremgangsmåten den samme.\namnesia@amnesia:~$ gpg2 --edit-key key@example.com gpg (GnuPG) 2.1.13; Copyright (C) 2016 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Secret key is available. sec rsa2048/B0B9158DFE7C1B96 created: 2017-04-12 expires: never usage: SC trust: ultimate validity: ultimate ssb rsa2048/D2CBD896A13B7B49 created: 2017-04-12 expires: never usage: E [ultimate] (1). Example Key \u0026lt;key@example.com\u0026gt; gpg\u0026gt; passwd gpg\u0026gt; save  Sikkerhetkopiering Etterhvert som nøkkelringen vokser blir det viktigere å viktigere å ha en sikkerhetskopi av denne.\nDet er tre ting som må sikkerhetkopieres: Offentlige nøkler, tillitsdatabasen og private nøkler.\nOffentlige nøkler For å sikkerhetskopiere de offentlige nøklene kopierer du bare filene pubring.gpg og pubring.kbx fra C:\\Users\\BRUKERNAVN\\AppData\\Roaming\\gnupg mappen på Windows eller i ~/.gnupg mappen på Linux/Unix.\nFår gjennopprette disse kan du bare kopiere disse tilbake på samme sted.\nTillitsdatabase Tillitsdatabasen kopieres med følgende kommando\namnesia@amnesia:~$ gpg2 --export-ownertrust \u0026gt; ownertrust-gpg.txt  og importeres med denne kommandoen\n amnesia@amnesia:~$ gpg2 --import-ownertrust ownertrust-gpg.txt  Private nøkler Dine private nøkler eksporteres med --export-secret-keys.\namnesia@amnesia:~$ gpg2 -a --export-secret-keys -o private-keys.asc  For å importere dine private nøkler bruker du --import\namnesia@amnesia:~$ gpg2 --import private-keys.asc  Gjør alt du kan for å holde din private nøkkel privat.\n Alle 4 filene bør lagres sikkert og ikke på datamaskinen, gjerne på en minnepinne.\n"
},
{
	"uri": "https://kryptosikkerhet.no/openpgp/signering/",
	"title": "Signering",
	"tags": [],
	"description": "",
	"content": " Et av kriteriene for sikker kommunikasjon er at man kan verifisere avsenderen og samtidig verifisere at innholdet ikke har blitt endret på veien. Digitale signaturer gir deg denne sikkerheten. En digital signatur kan brukes på meldinger som skal sendes til mange mottakere, der kryptering ikke nødvendigvis er et behov, eller ønskelig.\nOpenPGP lar deg signere meldinger med din private nøkkel. Mottakeren kan verifisere at du er avsenderen, og at meldingen ikke har blitt modifisert på veien ved å bruke din offentlige nøkkel.\nOpenPGP lar deg signere et dokument på tre forskjellige måter:\n Integrert signatur Klartekstsignatur Frakoblet signatur  Alle de tre signaturtypene har ulike fordeler og ulemper, men gir samme sikkerhet. Bruk den signaturtypen som passer deg best i hvert tilfelle.\n Integrert signatur Dette er standardvalget for signering av dokumenter i GnuPG. Denne måten å signere et dokument lager et nytt dokument som inneholder både din digitale signatur og det originale dokumentet. Dokumentet er komprimert og i binært formart.\namnesia@amnesia:~$ gpg2 --sign test.txt \u0026gt; test.sig  Dette produserer et signert dokument test.txt.gpg. Dokumentet inneholder både din digitale signatur og det originale dokumentet test.txt. Dokumentet er komprimert og i binært format.\nFor å kontrollere signaturen på et signert dokument, samt for å gjennopprette det originale dokumentet bruker du --decrypt kommandoen (selv om dokumentet ikke er kryptert).\namnesia@amnesia:~$ gpg2 --output test.txt --decrypt test.txt.gpg gpg: Signature made Sat 25 Feb 2017 09:23:14 AM UTC gpg: using RSA key 0x3E2A6E298A8C9B2C gpg: Good signature from \u0026quot;Alice \u0026lt;alice@example.com\u0026gt;\u0026quot; [ultimate] Primary key fingerprint: 52E9 0DB3 F32A E6B0 C7BD C939 3E2A 6E29 8A8C 9B2C  Denne måten å signere dokumenter på er praktisk dersom du vet at mottakeren benytter OpenPGP, men det er fork eksempel ikke mulig å åpne det originale dokumentet uten å først verifisere signaturen.\nKlartekstsignatur Et vanlig bruksområde for digitale signaturer er epost eller andre digitale meldinger. I slike tilfeller er det ikke ønskelig å pakke inn meldingen i en binær fil. Til slike tilfeller kan man benytte en klartekstsignatur. En klartekstsignatur gjøres med --clearsign parameteren. Når man produserer en klartekstsignatur, lages en ASCII signatur som omgir det originale dokumentet i et nytt dokument test.txt.asc.\namnesia@amnesia:~$ gpg2 --clearsign test.txt You need a passphrase to unlock the secret key for user: \u0026quot;Alice \u0026lt;alice@example.com\u0026gt;\u0026quot; 2048-bit RSA key, ID 0x3E2A6E298A8C9B2C, created 2017-02-25 amnesia@amnesia:~$ cat test.txt.asc -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA512 Hello World -----BEGIN PGP SIGNATURE----- iQEcBAEBCgAGBQJYsU+HAAoJED4qbimKjJsssYUH/1mxNBPGv9uTb8hqTXj3G207 RmKwEhSeuaNUjH+E/rxNVSVBhWBMSuEFfXth1YkCvdi/oo9rDB4pZaqUSocQyg8t nRsg2EWEg6qM3iaknVqdSCoKvQ2M0FwrnpqdTcUShrrYXgIQVXA3E8/yh3Y2ZJH2 Vibt5QHYXZor5s2RbMsnT9+KXpHqAFbHgMxmi554tpGfdqSwTJhJdk2yoTjV03Ps 4wdu3OkCVhK+54IpVVzWrZZCZ9fWshcU/AWzBs4KWtsJeE4v5nUCCpKGFB6NGi6O 1ZpDTPqUI1jWSi7AVluh/n1S79So41ArhuRJOa4dnw7yV1J7TsnNZnjYUpISN+4= =4vOI -----END PGP SIGNATURE-----  En slik signert melding kan enkelt sendes som epost, eller som en annen form for melding. Selv om ikke alle mottakerene bruker OpenPGP kan de uansett lese innholdet i meldingen.\nEn klartekstsignatur verifiseres på samme måte som en vanlig signatur, med --decrypt.\namnesia@amnesia:~$ gpg2 --decrypt test.txt.asc Hello World gpg: Signature made Sat 25 Feb 2017 09:33:59 AM UTC gpg: using RSA key 0x3E2A6E298A8C9B2C gpg: Good signature from \u0026quot;Alice \u0026lt;alice@example.com\u0026gt;\u0026quot; [ultimate] Primary key fingerprint: 52E9 0DB3 F32A E6B0 C7BD C939 3E2A 6E29 8A8C 9B2C  Frakoblet signatur Begge de to måtene beskrevet over har begrenset nytteverdi, og begge metodene gjør endringer i det originale dokumentet. Derfor finnes det en tredje metode som lagrer signaturen i en separat fil, uten å gjøre endringer i det originale dokumentet. Dette gjøres med --detach-sign parameteren. Det kan være praktisk dersom du ønsker å distribuere for eksempel software som er signert.\namnesia@amnesia:~$ gpg2 --detach-sign test.txt You need a passphrase to unlock the secret key for user: \u0026quot;Alice \u0026lt;alice@example.com\u0026gt;\u0026quot; 2048-bit RSA key, ID 0x3E2A6E298A8C9B2C, created 2017-02-25  Dette lager en signaturfil som har samme filnavn som det originale dokumentet etterfulgt av .sig.\nFor å verfifisere signaturen trenger man både det originale dokumentet og signaturfilen.\namnesia@amnesia:~$ gpg2 --verify test.txt.sig test.txt gpg: Signature made Sat 25 Feb 2017 09:41:47 AM UTC gpg: using RSA key 0x3E2A6E298A8C9B2C gpg: Good signature from \u0026quot;Alice \u0026lt;alice@example.com\u0026gt;\u0026quot; [ultimate] Primary key fingerprint: 52E9 0DB3 F32A E6B0 C7BD C939 3E2A 6E29 8A8C 9B2C  Dersom man gjør endringer i det originale dokumentet vil signaturen bli ugyldig.\namnesia@amnesia:~$ echo \u0026quot;Hello\u0026quot; \u0026gt;\u0026gt; test.txt amnesia@amnesia:~$ gpg2 --verify test.txt.sig test.txt gpg: Signature made Sat 25 Feb 2017 09:41:47 AM UTC gpg: using RSA key 0x3E2A6E298A8C9B2C gpg: BAD signature from \u0026quot;Alice \u0026lt;alice@example.com\u0026gt;\u0026quot; [ultimate]  "
},
{
	"uri": "https://kryptosikkerhet.no/openpgp/kryptering/",
	"title": "Kryptering",
	"tags": [],
	"description": "",
	"content": " Kryptering av en melding eller fil gjør at ingen andre enn avsender og mottaker kan lese innholdet. Når du skal sende og motta krypterte meldinger har din offentlige og private nøkkel helt klare funksjoner. Du kan se på din offentlige nøkkel som en åpen safe. Når du krypterer et dokument legger du det inn i safen og vrir om kodelåsen flere ganger. Den private nøkkelen er kombinasjonen du trenger for å åpne safen.\nHvis du vil kryptere en melding til Alice bruker du Alice sin offentlige nøkkel. Hun kan da dekryptere den med sin private nøkkel. Hvis Alice vil sende deg en kryptert melding krypterer hun den med din offentlige nøkkel. Du kan da dekryptere den med din private nøkkel.\nKryptering Før du kan sende krypterte meldinger må du importere den offentlige nøkkelen til mottakeren, slik som beskrevet i Nøkkelring-kapittelet.\n  amnesia@amnesia:~$ gpg2 --output doc.gpg --encrypt -r alice@example.com test.txt  -r parameteren spesifiseres en gang for hver mottaker og er etterfulgt av en mottaker. I dette tilfellet aliceexample.com. Dersom du selv skal kunne dekryptere dokumentet må du også spesifisere deg selv som mottaker i tillegg.\nDu kan også lagre de krypterte dokumentet som ASCII tekst som er litt mer lesbart ved å bruke --armor parameteren.\namnesia@amnesia:~$ gpg2 --armor --output doc.asc --encrypt -r alice@example.com test.txt amnesia@amnesia:~$ cat doc.asc -----BEGIN PGP MESSAGE----- hQEMA2t88U6yRa3AAQgAslk5MYEmM8Mqjtj9dACFzuOIwfM+vwGZ06zXheOo9oId SsV3Uowpxi74YApXbPvEoMpSpQMUgegF0GafBbBzFL/W/f0IK3nBM4mxsK07M98e Ub77azNkx2oLilKnYstN4IhZr9Xu2fFSle0hRFo/u0XU0+GS97bKri64ABJFWZwF Y+kiFaB9QG0ETPSWulCL2us6miZ8x8yDZQ/tUNCsaIYukYAxiqZYbSn2vQ+yB1sJ ki6MqWPw6lLLl90XJumL3YMS3s2Yi+yUOU9xhpqLGt2kaN86AEQJcSSUC7fxDJu3 kJyEjAe8aNcWk0o16VNhCdqIzwnBCVnFExfcezUzDdJSAc1ql7DCa8XN2BmM/DzE S2TYrahjX9J+JN+vu+h5/Y733Yekxd2wt7HWAbYcFGiL+UGFiXxmHKW1fsTMh/d2 0Idfdb8BsZ/ROkv2JFfHMBboFw== =E/Yx -----END PGP MESSAGE-----  Dekryptering For å dekryptere et dokument benyttes --decrypt parameteren. Du trenger da den private nøkkelen som tilhører den offentlige nøkkelen som ble brukt for å kryptere dokumentet.\namnesia@amnesia:~$ gpg2 --output doc.txt --decrypt doc.gpg You need a passphrase to unlock the secret key for user: \u0026quot;Alice \u0026lt;alice@example.com\u0026gt;\u0026quot; 2048-bit RSA key, ID 0x6B7CF14EB245ADC0, created 2017-02-25 (subkey on main key ID 0x3E2A6E298A8C9B2C) gpg: encrypted with 2048-bit RSA key, ID 0x6B7CF14EB245ADC0, created 2017-02-25 \u0026quot;Alice \u0026lt;alice@example.com\u0026gt;\u0026quot; amnesia@amnesia:~$ cat doc.txt Hello World Hello amnesia@amnesia:~$  "
},
{
	"uri": "https://kryptosikkerhet.no/openpgp/fallgruver/",
	"title": "Fallgruver",
	"tags": [],
	"description": "",
	"content": " OpenPGP er ikke en magisk flosshatt som løser alle problemer i verden uten å skape noen nye utfordringer. Det finnes flere fallgruver ved bruk av OpenPGP. Dette er ikke en komplett liste, men en oversikt over noen av de fallgruvene som oftest skaper problemer for de som benytter OpenPGP.\nDårlig passord I kapittelet om konsepter skrev jeg at all sikkerheten i krypteringsalgortimene ligger i din private nøkkel. Det eneste som beskytter din private nøkkel fra å bli missbrukt dersom den kommer på avveie er passfrasen som beskytter den. Passfrasen er faktisk en kryteringsnøkkel for din private nøkkel. Derfor er det veldig viktig at denne passfrasen er god.\nOrdet passfrase brukes besvisst i steden for ordet passord. Meningen er å oppmuntre til bruk av setninger eller flere ord som passord.\n Det finnes mange meninger om hvordan man skal lage seg et bra passord, og hvor mange passord man skal ha. Hvis det er et passord som bør være forskjellig fra alle andre så er det passordet som beskytter din private nøkkel. Tegnestripen over er ikke bare morsom, men også et veldig bra tips.\nDet finnes flere måter å generere en passfrase. Diceware er kanskje en av de mest nerdete, men da får du et meget bra passord. Bitcoin lommebøker bruker en variant av Diceware. Jeg anbefaler følgende ordliste hvis du vil lage deg en diceware passfrase. Denne ordlisten inneholder ikke ord som staves nesten likt.\nMetadata En av de største svakhetene med OpenPGP når det brukes til kryptering av epost er at det bare selve innholdet i meldingen som krypteres. Det betyr at metadata i eposten er synlig for epostopertøren og andre snokere. Innholdet i denne metadataen varierer litt avhengig av epostklient og hvordan den blir sendt, men i de fleste tilfeller vil denne inneholde:\n Emne Avsender Mottaker Epostserver som ble benyttet Tidspunkt når meldingen ble sendt  Merk at metadata vil være identisk enten du bruker OpenPGP eller ikke til å kryptere epost. Lekasjen av metadata blir ikke større om du benytter OpenPGP men det betyr at selv om du sender en kryptert epost så vil deler av den være ukryptert.\nNoen epostklienter (bl.a. Thunderbird) støtter kryptering av emnefeltet. Selv om dette ikke er en standarisert metode kan det være verdt å undersøke.\n Tapte nøkler Dersom du mister tilgangen til din egen private nøkkel vil du ikke lenger være i stand til å dekryptere meldinger som var kryptert med den nøkkelen som mottaker. Dette er normalt sett ikke et stort problem med kryptert epost, men kan være et større problem dersom du hadde en kryptert backup av feriebildene. Det er derfor veldig viktig med sikkerhetskopi av din private nøkkel.\nOppbevar sikkerhetskopien på en minnepinne som du oppbevarer et trygt sted. Sammen med denne minnepinnen bør du også ha en lapp med passfrasen som beskytter nøkkelen din.\nIkke oppdaterte nøkler Dersom de du kommuniserer med ikke oppdaterer din offentlige nøkkel fra nøkkeltjenere regelmessig, og du ikke oppdaterer de offentlige nøklene til de du kommuniserer med kan man rissikere at du krypterer meldinger med nøkler som er utgått eller tilbakekalt. I beste falle får du beskjed om å kryptere meldingen på nytt med mottakeren sin nye nøkkel. I værste fall kan meldingen havne i hendene til en angriper som har fått tilgang til den private nøkkelen.\n"
},
{
	"uri": "https://kryptosikkerhet.no/openpgp/sikre-noekler/",
	"title": "Sikker oppbevaring av nøkler",
	"tags": [],
	"description": "",
	"content": " Sikker oppbevaring av din private nøkkel er viktig av flere årsaker. For det første vil personer med tilgang til din nøkkel kunne lese meldinger du har mottatt, samtidig som man kan signere meldinger på vegne av deg.\nDersom du mister din egen nøkkel vil du måtte generere nye, distribuere de til de du kommuniserer med samt du må bygge et nytt tillitsnettverk. Alt dette er arbeid som med enkle steg kan ungås.\nI dette kapittelet skal vi generere nøkler på en sikker installasjon av Tails, som lagres kryptert på en USB-minnepinne.\nTails For å ungå at en angriper får tilgang til dine nøkler ved hjelp av malware eller lignende installert på din maskin anbefales Tails. Tails er et operativsystem som installeres på en USB-minnepinne, som ikke lagrer endringer som blir gjort. Vi beskriver ikke selve installasjoen av Tails da den er meget godt beskrevet i installasjonsguiden for Tails.\nNår du installerer Tails må du sette opp varig (persistent) lagring. Dette må også aktiveres for GnuPG.\n Etter at du har installert Tails, og satt opp varig lagring for GnuPG må du teste at dette fungerer. Det gjør du ved å generere en testnøkkel, og så restarter du maskinen. Dersom denne fremdeles er der etter en restart vet du at det virker.\n Oppsett Det vi ønsker å oppnå er å lagre hovednøkkelen på en kryptert USB-minnepinne, mens vi kopierer ut en undernøkkel for kryptering og signering til de enhetene vi ønsker. Dersom denne enheten eller nøkkelen komprimiteres kan vi tilbakekalle undernøkkelen og generere en ny. Så lenge vår krypterete USB-minnepinne ikke komprimiteres kan vi beholde vår hovednøkkel og dermed også fingeravtrykket og tillitsnettet vårt.\nGenerere nøkler Tails kommer med både GnuPG 2.0 og 1.4. For å bruke 2.0 kjører vi gpg2.\n amnesia@amnesia:~$ gpg2 --gen-key gpg (GnuPG) 2.0.26; Copyright (C) 2013 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) Your selection? 4 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (2048) Requested keysize is 2048 bits Please specify how long the key should be valid. 0 = key does not expire \u0026lt;n\u0026gt; = key expires in n days \u0026lt;n\u0026gt;w = key expires in n weeks \u0026lt;n\u0026gt;m = key expires in n months \u0026lt;n\u0026gt;y = key expires in n years Key is valid for? (0) 1y Key expires at Tue 20 Feb 2018 06:19:33 PM UTC Is this correct? (y/N) y GnuPG needs to construct a user ID to identify your key. Real name: Alice Email address: alice@example.com Comment: You selected this USER-ID: \u0026quot;Alice \u0026lt;alice@example.com\u0026gt;\u0026quot; Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o You need a Passphrase to protect your secret key. We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. gpg: key 0x9384FE7B9D82D22F marked as ultimately trusted public and secret key created and signed. gpg: checking the trustdb gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model gpg: depth: 0 valid: 1 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 1u gpg: next trustdb check due at 2018-02-20 pub 2048R/0x9384FE7B9D82D22F 2017-02-20 [expires: 2018-02-20] Key fingerprint = CB24 6911 23AD 4842 6247 EA24 9384 FE7B 9D82 D22F uid [ultimate] Alice \u0026lt;alice@example.com\u0026gt; Note that this key cannot be used for encryption. You may want to use the command \u0026quot;--edit-key\u0026quot; to generate a subkey for this purpose.  Vi genererer nøkler på vanlig måte, men legg merke til at vi bare laget signeringsnøkkel. Vi må nå lage en undernøkkel for å motta krypterte meldinger, samt en undernøkkel for å signere meldinger.\nGnerere undernøkler amnesia@amnesia:~$ gpg2 --edit-key alice@example.com gpg (GnuPG) 2.0.26; Copyright (C) 2013 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Secret key is available. pub 2048R/0x9384FE7B9D82D22F created: 2017-02-20 expires: 2018-02-20 usage: SC trust: ultimate validity: ultimate [ultimate] (1). Alice \u0026lt;alice@example.com\u0026gt; gpg\u0026gt; addkey Key is protected. You need a passphrase to unlock the secret key for user: \u0026quot;Alice \u0026lt;alice@example.com\u0026gt;\u0026quot; 2048-bit RSA key, ID 0x9384FE7B9D82D22F, created 2017-02-20 Please select what kind of key you want: (3) DSA (sign only) (4) RSA (sign only) (5) Elgamal (encrypt only) (6) RSA (encrypt only) Your selection? 4 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (2048) Requested keysize is 2048 bits Please specify how long the key should be valid. 0 = key does not expire \u0026lt;n\u0026gt; = key expires in n days \u0026lt;n\u0026gt;w = key expires in n weeks \u0026lt;n\u0026gt;m = key expires in n months \u0026lt;n\u0026gt;y = key expires in n years Key is valid for? (0) 1y Key expires at Tue 20 Feb 2018 06:33:24 PM UTC Is this correct? (y/N) y Really create? (y/N) y We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. pub 2048R/0x9384FE7B9D82D22F created: 2017-02-20 expires: 2018-02-20 usage: SC trust: ultimate validity: ultimate sub 2048R/0x3FA64433C98A17BA created: 2017-02-20 expires: 2018-02-20 usage: S [ultimate] (1). Alice \u0026lt;alice@example.com\u0026gt; gpg\u0026gt; addkey Key is protected. You need a passphrase to unlock the secret key for user: \u0026quot;Alice \u0026lt;alice@example.com\u0026gt;\u0026quot; 2048-bit RSA key, ID 0x9384FE7B9D82D22F, created 2017-02-20 Please select what kind of key you want: (3) DSA (sign only) (4) RSA (sign only) (5) Elgamal (encrypt only) (6) RSA (encrypt only) Your selection? 6 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (2048) Requested keysize is 2048 bits Please specify how long the key should be valid. 0 = key does not expire \u0026lt;n\u0026gt; = key expires in n days \u0026lt;n\u0026gt;w = key expires in n weeks \u0026lt;n\u0026gt;m = key expires in n months \u0026lt;n\u0026gt;y = key expires in n years Key is valid for? (0) 1y Key expires at Tue 20 Feb 2018 06:33:44 PM UTC Is this correct? (y/N) y Really create? (y/N) y We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. pub 2048R/0x9384FE7B9D82D22F created: 2017-02-20 expires: 2018-02-20 usage: SC trust: ultimate validity: ultimate sub 2048R/0x3FA64433C98A17BA created: 2017-02-20 expires: 2018-02-20 usage: S sub 2048R/0x8797A8A2930D2881 created: 2017-02-20 expires: 2018-02-20 usage: E [ultimate] (1). Alice \u0026lt;alice@example.com\u0026gt; gpg\u0026gt; save amnesia@amnesia:~$  Du kan nå se at det finnes to undernøkler (sub), en for kryptering (E), og en for signering (S).\nEksportere undernøkler Vi kan nå eksportere undernøklene til de enhenten vi bruker i hverdagen.\namnesia@amnesia:~$ gpg2 --export-secret-subkeys \u0026gt; subkeys.gpg  Dette lagrer våre private undernøkler i filen subkeys.gpg. Disse har samme passord som vi satt når vi genererte hovednøkkelen. Denne filen kan vi nå kopiere til de klientne vi vil benytte OpenPGP på.\nImportere nøkler på klienten Når du har kopiert subkeys.gpg inn på klienten din importerer vi undernøklene våre.\namnesia@amnesia:~$ gpg2 --import subkeys.gpg gpg: key 0x9384FE7B9D82D22F: secret key imported gpg: key 0x9384FE7B9D82D22F: public key \u0026quot;Alice \u0026lt;alice@example.com\u0026gt;\u0026quot; imported gpg: Total number processed: 1 gpg: imported: 1 (RSA: 1) gpg: secret keys read: 1 gpg: secret keys imported: 1 amnesia@amnesia:~$ gpg2 -K /home/amnesia/.gnupg/secring.gpg -------------------------------- sec# 2048R/0x9384FE7B9D82D22F 2017-02-20 [expires: 2018-02-20] Key fingerprint = CB24 6911 23AD 4842 6247 EA24 9384 FE7B 9D82 D22F uid Alice \u0026lt;alice@example.com\u0026gt; ssb 2048R/0x3FA64433C98A17BA 2017-02-20 ssb 2048R/0x8797A8A2930D2881 2017-02-20  Vi ser nå at nøklene er importert, men også at vår hovednøkkel (sec) er etterfulgt av en firkant (#). Dette betyr at denne nøkkelen ikke er tilgjengelig på denne enheten.\nTa backup Det er nå på tide å sikkerhetskopiere nøklene. Sikkerhetskopien lagrer du på en egen USB-minnepinne. Du har nå en kopi av nøklene på din Tails minnepinne, samt en ekstra kopi på en egen USB-minnepinne.\nSikkerhetskopien er bare beskyttet av passordet du satt når du genererte nøklene. Husk derfor å bare benytte denne minnepinnen når du kjører Tails.\n "
},
{
	"uri": "https://kryptosikkerhet.no/openpgp/rotere-noekler/",
	"title": "Rotere undernøkler",
	"tags": [],
	"description": "",
	"content": " Dette kapittelet forutsetter at du har et offline nøkkelpar som beskrevet i kapittelet om Sikker oppbevaring av nøkler.\n Dersom dine undernøkler går tapt eller komprimiteres kan du enkelt tilbakekalle disse, og generere nye ved å bruke din minnepinne med Tails som har dine hovednøkler på. Når vi tilbakekaller nøklene sier vi til omverden av disse ikke lenger skal benyttes. Dersom noen signerer en melding med nøkler som er tilbakekalt vi ikke signaturen være gyldig. Deretter gernerer vi nye undernøkler som vi kopierer tilbake på klientene våre, som beskrevet i kapittelet om Sikker oppbevaring av nøkler.\nDet er viktig at din nye offentlige nøkkel lastes opp til nøkkelserverene. Det er slik omverden får vite om dine nye undernøkler, og at de gamle er tilbakekalt.\nTilbakekall dine gamle nøkler amnesia@amnesia:~$ gpg2 --edit-key alice@example.com gpg (GnuPG) 2.0.26; Copyright (C) 2013 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Secret key is available. pub 2048R/0x50AD20916F557D14 created: 2017-02-20 expires: 2018-02-20 usage: SC trust: ultimate validity: ultimate sub 2048R/0x94B56B273C610BDB created: 2017-02-20 expires: 2018-02-20 usage: S sub 2048R/0xE69C73D0FFA0432F created: 2017-02-20 expires: 2018-02-20 usage: E [ultimate] (1). Alice \u0026lt;alice@example.com\u0026gt; gpg\u0026gt; key 1 pub 2048R/0x50AD20916F557D14 created: 2017-02-20 expires: 2018-02-20 usage: SC trust: ultimate validity: ultimate sub* 2048R/0x94B56B273C610BDB created: 2017-02-20 expires: 2018-02-20 usage: S sub 2048R/0xE69C73D0FFA0432F created: 2017-02-20 expires: 2018-02-20 usage: E [ultimate] (1). Alice \u0026lt;alice@example.com\u0026gt; gpg\u0026gt; key 2 pub 2048R/0x50AD20916F557D14 created: 2017-02-20 expires: 2018-02-20 usage: SC trust: ultimate validity: ultimate sub* 2048R/0x94B56B273C610BDB created: 2017-02-20 expires: 2018-02-20 usage: S sub* 2048R/0xE69C73D0FFA0432F created: 2017-02-20 expires: 2018-02-20 usage: E [ultimate] (1). Alice \u0026lt;alice@example.com\u0026gt; gpg\u0026gt; revkey Do you really want to revoke the selected subkeys? (y/N) y Please select the reason for the revocation: 0 = No reason specified 1 = Key has been compromised 2 = Key is superseded 3 = Key is no longer used Q = Cancel Your decision? 1 Enter an optional description; end it with an empty line: \u0026gt; Reason for revocation: Key has been compromised (No description given) Is this okay? (y/N) y You need a passphrase to unlock the secret key for user: \u0026quot;Alice \u0026lt;alice@example.com\u0026gt;\u0026quot; 2048-bit RSA key, ID 0x50AD20916F557D14, created 2017-02-20 You need a passphrase to unlock the secret key for user: \u0026quot;Alice \u0026lt;alice@example.com\u0026gt;\u0026quot; 2048-bit RSA key, ID 0x50AD20916F557D14, created 2017-02-20 pub 2048R/0x50AD20916F557D14 created: 2017-02-20 expires: 2018-02-20 usage: SC trust: ultimate validity: ultimate The following key was revoked on 2017-02-20 by RSA key 0x50AD20916F557D14 Alice \u0026lt;alice@example.com\u0026gt; sub 2048R/0x94B56B273C610BDB created: 2017-02-20 revoked: 2017-02-20 usage: S The following key was revoked on 2017-02-20 by RSA key 0x50AD20916F557D14 Alice \u0026lt;alice@example.com\u0026gt; sub 2048R/0xE69C73D0FFA0432F created: 2017-02-20 revoked: 2017-02-20 usage: E [ultimate] (1). Alice \u0026lt;alice@example.com\u0026gt; gpg\u0026gt; save  Generer nye undernøkler amnesia@amnesia:~$ gpg2 --edit-key alice@example.com gpg (GnuPG) 2.0.26; Copyright (C) 2013 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Secret key is available. pub 2048R/0x50AD20916F557D14 created: 2017-02-20 expires: 2018-02-20 usage: SC trust: ultimate validity: ultimate The following key was revoked on 2017-02-20 by RSA key 0x50AD20916F557D14 Alice \u0026lt;alice@example.com\u0026gt; sub 2048R/0x94B56B273C610BDB created: 2017-02-20 revoked: 2017-02-20 usage: S The following key was revoked on 2017-02-20 by RSA key 0x50AD20916F557D14 Alice \u0026lt;alice@example.com\u0026gt; sub 2048R/0xE69C73D0FFA0432F created: 2017-02-20 revoked: 2017-02-20 usage: E [ultimate] (1). Alice \u0026lt;alice@example.com\u0026gt; gpg\u0026gt; addkey Key is protected. You need a passphrase to unlock the secret key for user: \u0026quot;Alice \u0026lt;alice@example.com\u0026gt;\u0026quot; 2048-bit RSA key, ID 0x50AD20916F557D14, created 2017-02-20 Please select what kind of key you want: (3) DSA (sign only) (4) RSA (sign only) (5) Elgamal (encrypt only) (6) RSA (encrypt only) Your selection? 4 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (2048) Requested keysize is 2048 bits Please specify how long the key should be valid. 0 = key does not expire \u0026lt;n\u0026gt; = key expires in n days \u0026lt;n\u0026gt;w = key expires in n weeks \u0026lt;n\u0026gt;m = key expires in n months \u0026lt;n\u0026gt;y = key expires in n years Key is valid for? (0) 1y Key expires at Tue 20 Feb 2018 07:45:00 PM UTC Is this correct? (y/N) y Really create? (y/N) y We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. pub 2048R/0x50AD20916F557D14 created: 2017-02-20 expires: 2018-02-20 usage: SC trust: ultimate validity: ultimate The following key was revoked on 2017-02-20 by RSA key 0x50AD20916F557D14 Alice \u0026lt;alice@example.com\u0026gt; sub 2048R/0x94B56B273C610BDB created: 2017-02-20 revoked: 2017-02-20 usage: S The following key was revoked on 2017-02-20 by RSA key 0x50AD20916F557D14 Alice \u0026lt;alice@example.com\u0026gt; sub 2048R/0xE69C73D0FFA0432F created: 2017-02-20 revoked: 2017-02-20 usage: E sub 2048R/0x8EE8D15759878C5A created: 2017-02-20 expires: 2018-02-20 usage: S [ultimate] (1). Alice \u0026lt;alice@example.com\u0026gt; gpg\u0026gt; addkey Key is protected. You need a passphrase to unlock the secret key for user: \u0026quot;Alice \u0026lt;alice@example.com\u0026gt;\u0026quot; 2048-bit RSA key, ID 0x50AD20916F557D14, created 2017-02-20 Please select what kind of key you want: (3) DSA (sign only) (4) RSA (sign only) (5) Elgamal (encrypt only) (6) RSA (encrypt only) Your selection? 6 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (2048) Requested keysize is 2048 bits Please specify how long the key should be valid. 0 = key does not expire \u0026lt;n\u0026gt; = key expires in n days \u0026lt;n\u0026gt;w = key expires in n weeks \u0026lt;n\u0026gt;m = key expires in n months \u0026lt;n\u0026gt;y = key expires in n years Key is valid for? (0) 1y Key expires at Tue 20 Feb 2018 07:45:11 PM UTC Is this correct? (y/N) y Really create? (y/N) y We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. pub 2048R/0x50AD20916F557D14 created: 2017-02-20 expires: 2018-02-20 usage: SC trust: ultimate validity: ultimate The following key was revoked on 2017-02-20 by RSA key 0x50AD20916F557D14 Alice \u0026lt;alice@example.com\u0026gt; sub 2048R/0x94B56B273C610BDB created: 2017-02-20 revoked: 2017-02-20 usage: S The following key was revoked on 2017-02-20 by RSA key 0x50AD20916F557D14 Alice \u0026lt;alice@example.com\u0026gt; sub 2048R/0xE69C73D0FFA0432F created: 2017-02-20 revoked: 2017-02-20 usage: E sub 2048R/0x8EE8D15759878C5A created: 2017-02-20 expires: 2018-02-20 usage: S sub 2048R/0x737E8D0A5B17C472 created: 2017-02-20 expires: 2018-02-20 usage: E [ultimate] (1). Alice \u0026lt;alice@example.com\u0026gt; gpg\u0026gt; save  Oppdater nøkkelserverene amnesia@amnesia:~$ gpg2 --send-keys 0x50AD20916F557D14 gpg: sending key 0x50AD20916F557D14 to hkps server hkps.pool.sks-keyservers.net  "
},
{
	"uri": "https://kryptosikkerhet.no/grunnleggende/",
	"title": "Grunnleggende sikkerhet",
	"tags": [],
	"description": "",
	"content": " Kapittel 1 Grunnleggende sikkerhet Grunnleggende informasjonssikkerhet.\n"
},
{
	"uri": "https://kryptosikkerhet.no/openpgp/",
	"title": "Kom i gang med OpenPGP",
	"tags": [],
	"description": "",
	"content": " Kapittel 2 Kom i gang med OpenPGP Grunnleggende innføring i bruk av GnuPG, og konseptene bak OpenPGP.\n"
},
{
	"uri": "https://kryptosikkerhet.no/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kryptosikkerhet.no/",
	"title": "Norsk OpenPGP guide",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://kryptosikkerhet.no/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]